version: '3.8'

services:
  # ========== Key-Value Storage ==========
  
  # Redis - 缓存数据库
  redis:
    image: redis:7.2-alpine
    container_name: agenticx-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-password}
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========== Vector Storage ==========
  
  # Milvus - 向量数据库
  milvus:
    image: milvusdb/milvus:v2.4.17
    container_name: agenticx-milvus
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - ./data/milvus:/var/lib/milvus
    depends_on:
      - etcd
      - minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3

  # Attu - Milvus 可视化管理界面
  attu:
    image: zilliz/attu:v2.4.9
    container_name: agenticx-attu
    environment:
      MILVUS_URL: milvus:19530
    ports:
      - "3001:3000"
    depends_on:
      - milvus
    restart: unless-stopped

  # Redis Commander - Redis 可视化管理界面
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: agenticx-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped

  # Qdrant - 向量搜索引擎
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: agenticx-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./data/qdrant:/qdrant/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========== Graph Storage ==========
  
  # Neo4j - 图数据库
  neo4j:
    image: neo4j:5.26.0
    container_name: agenticx-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: '["apoc"]'
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./data/neo4j:/data
      - ./data/neo4j/logs:/logs
      - ./data/neo4j/import:/var/lib/neo4j/import
      - ./data/neo4j/plugins:/plugins
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-password}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========== Object Storage ==========
  
  # MinIO - S3兼容对象存储
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: agenticx-minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ========== Infrastructure Services ==========
  
  # etcd - 分布式键值存储 (Milvus依赖)
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: agenticx-etcd
    environment:
      ETCD_AUTO_COMPACTION_MODE: revision
      ETCD_AUTO_COMPACTION_RETENTION: "1000"
      ETCD_QUOTA_BACKEND_BYTES: "4294967296"
      ETCD_SNAPSHOT_COUNT: "50000"
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - ./data/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Jaeger - 分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:1.48.0
    container_name: agenticx-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "6831:6831/udp"
      - "6832:6832/udp"
    restart: unless-stopped

  # ========== Network & Load Balancer ==========
  
  # Nginx - 反向代理和负载均衡
  nginx:
    image: nginx:alpine
    container_name: agenticx-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/ssl:/etc/nginx/ssl
    depends_on:
      - redis
      - milvus
      - qdrant
      - neo4j
      - minio
    restart: unless-stopped

volumes:
  redis_data:
  milvus_data:
  qdrant_data:
  neo4j_data:
  minio_data:
  etcd_data:

networks:
  default:
    name: agenticx-network
    driver: bridge