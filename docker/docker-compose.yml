version: '3.8'

services:
  # ========== Key-Value Storage ==========
  
  # PostgreSQL - 关系型数据库
  postgres:
    image: postgres:15-alpine
    container_name: agenticx-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agenticx}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./configs/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - 缓存数据库
  redis:
    image: redis:7.2-alpine
    container_name: agenticx-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-password}
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB - 文档数据库
  mongodb:
    image: mongo:7.0
    container_name: agenticx-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGODB_DB:-agenticx}
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongodb:/data/db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========== Vector Storage ==========
  
  # Milvus - 向量数据库
  milvus:
    image: milvusdb/milvus:v2.4.17
    container_name: agenticx-milvus
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - ./data/milvus:/var/lib/milvus
    depends_on:
      - etcd
      - minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3

  # Attu - Milvus 可视化管理界面
  attu:
    image: zilliz/attu:v2.4.9
    container_name: agenticx-attu
    environment:
      MILVUS_URL: milvus:19530
    ports:
      - "3001:3000"  # 避免与Grafana端口冲突
    depends_on:
      - milvus
    restart: unless-stopped

  # Redis Commander - Redis 可视化管理界面
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: agenticx-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped

  # Qdrant - 向量搜索引擎
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: agenticx-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./data/qdrant:/qdrant/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chroma - 向量数据库
  chroma:
    image: chromadb/chroma:0.4.22
    container_name: agenticx-chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ./data/chroma:/chroma/chroma
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Weaviate - 向量搜索引擎
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: agenticx-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
    ports:
      - "8080:8080"
    volumes:
      - ./data/weaviate:/var/lib/weaviate
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch - 搜索引擎 + 向量搜索
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: agenticx-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========== Graph Storage ==========
  
  # Neo4j - 图数据库
  neo4j:
    image: neo4j:5.26.0
    container_name: agenticx-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: '["apoc"]'
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./data/neo4j:/data
      - ./data/neo4j/logs:/logs
      - ./data/neo4j/import:/var/lib/neo4j/import
      - ./data/neo4j/plugins:/plugins
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-password}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nebula Graph - 分布式图数据库
  nebula-graphd:
    image: vesoft/nebula-graphd:v3.6.0
    container_name: agenticx-nebula-graphd
    ports:
      - "9669:9669"
    volumes:
      - ./data/nebula/graphd:/usr/local/nebula/data
    restart: unless-stopped

  nebula-metad:
    image: vesoft/nebula-metad:v3.6.0
    container_name: agenticx-nebula-metad
    ports:
      - "9559:9559"
    volumes:
      - ./data/nebula/metad:/usr/local/nebula/data
    restart: unless-stopped

  nebula-storaged:
    image: vesoft/nebula-storaged:v3.6.0
    container_name: agenticx-nebula-storaged
    ports:
      - "9777:9777"
      - "9778:9778"
      - "9779:9779"
    volumes:
      - ./data/nebula/storaged:/usr/local/nebula/data
    restart: unless-stopped

  # ========== Object Storage ==========
  
  # MinIO - S3兼容对象存储
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: agenticx-minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ========== Infrastructure Services ==========
  
  # etcd - 分布式键值存储 (Milvus依赖)
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: agenticx-etcd
    environment:
      ETCD_AUTO_COMPACTION_MODE: revision
      ETCD_AUTO_COMPACTION_RETENTION: "1000"
      ETCD_QUOTA_BACKEND_BYTES: "4294967296"
      ETCD_SNAPSHOT_COUNT: "50000"
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - ./data/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ========== Monitoring & Observability ==========
  
  # Prometheus - 监控系统
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: agenticx-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana - 可视化面板
  grafana:
    image: grafana/grafana:10.2.3
    container_name: agenticx-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger - 分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:1.48.0
    container_name: agenticx-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "6831:6831/udp"
      - "6832:6832/udp"
    restart: unless-stopped

  # ========== Network & Load Balancer ==========
  
  # Nginx - 反向代理和负载均衡
  nginx:
    image: nginx:alpine
    container_name: agenticx-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/ssl:/etc/nginx/ssl
    depends_on:
      - postgres
      - redis
      - mongodb
      - milvus
      - qdrant
      - chroma
      - weaviate
      - neo4j
      - minio
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  milvus_data:
  qdrant_data:
  chroma_data:
  weaviate_data:
  elasticsearch_data:
  neo4j_data:
  nebula_data:
  minio_data:
  etcd_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: agenticx-network
    driver: bridge