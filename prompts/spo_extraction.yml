# SPO抽取提示词配置

name: "spo_extraction"
description: "基于定制Schema进行SPO三元组抽取"
version: "1.0"

# 主要模板 - 参考youtu-graphrag的详细指导
template: |
  您是专家信息提取器和结构化数据组织者。您的任务是分析提供的文本并提取尽可能多的有价值实体、它们的属性和关系，以结构化JSON格式呈现。

  ## 抽取指导原则：
  1. **全面性**：识别文本中的所有重要实体，包括人物、组织、概念、技术、方法、数据集、指标等
  2. **关系丰富性**：抽取实体间的各种关系，包括因果关系、从属关系、比较关系、时间关系等
  3. **属性完整性**：为每个实体抽取相关属性，如描述、类型、数值、时间等
  4. **一致性**：确保相同实体在不同位置使用相同的名称
  5. **精确性**：基于文本内容，不要添加文本中没有的信息

  ## 定制Schema：
  **实体类型**：{node_types}
  **关系类型**：{relation_types}
  **属性类型**：{attribute_types}

  ## 抽取策略：
  - 对于**学术论文**：重点抽取作者、方法、算法、数据集、实验结果、评估指标等
  - 对于**技术文档**：重点抽取技术组件、依赖关系、配置参数、性能指标等
  - 对于**商业文档**：重点抽取公司、产品、市场、财务指标、业务关系等

  ## 待分析文本：
  {text}

  ## 输出要求：
  请严格按照以下JSON格式返回，确保抽取尽可能多的有价值信息：

  {{
    "attributes": {{
      "实体名称": [
        "属性名: 属性值",
        "描述: 详细描述"
      ]
    }},
    "triples": [
      ["主语实体", "谓语关系", "宾语实体"],
      ["作者", "提出", "方法"],
      ["算法", "应用于", "领域"],
      ["数据集", "用于训练", "模型"],
      ["方法", "优于", "基线方法"]
    ],
    "entity_types": {{
      "实体名称": "实体类型"
    }}
  }}

  **重要**：只返回有效的JSON格式，不要包含任何其他文字或解释。确保抽取的三元组数量充足，关系类型丰富多样。

# 简化模板（用于较短文本）
simple_template: |
  从文本中抽取实体和关系：

  文本：{text}

  返回JSON：
  {{
    "attributes": {{"实体": ["属性"]}},
    "triples": [["实体1", "关系", "实体2"]],
    "entity_types": {{"实体": "类型"}}
  }}

# 领域特定模板
domain_templates:
  # 技术文档
  technology:
    template: |
      从技术文档中抽取实体和关系：

      文本：{text}

      返回JSON格式：
      {{
        "attributes": {{"实体": ["属性"]}},
        "triples": [["实体1", "关系", "实体2"]],
        "entity_types": {{"实体": "类型"}}
      }}

  # 商业文档  
  business:
    template: |
      从商业文档中抽取实体和关系：

      文本：{text}

      返回JSON格式：
      {{
        "attributes": {{"实体": ["属性"]}},
        "triples": [["实体1", "关系", "实体2"]],
        "entity_types": {{"实体": "类型"}}
      }}

  # 学术文档 - 增强版
  academic:
    template: |
      您是学术文献分析专家。请从以下学术文档中深度抽取知识图谱信息，特别关注：

      **重点抽取内容**：
      1. **研究主体**：作者、机构、研究团队
      2. **核心概念**：提出的方法、算法、模型、框架
      3. **技术组件**：使用的技术、工具、数据集、指标
      4. **实验设置**：实验参数、评估方法、基线模型
      5. **研究关系**：方法间的比较、改进、依赖关系
      6. **性能指标**：准确率、效率、各种评估指标

      **关系抽取重点**：
      - 作者关系：提出、开发、实现、评估
      - 技术关系：基于、改进、优于、应用、集成
      - 数据关系：训练、测试、验证、评估
      - 性能关系：达到、超越、对比、衡量

      **Schema指导**：
      实体类型：{node_types}
      关系类型：{relation_types}
      属性类型：{attribute_types}

      **待分析文本**：
      {text}

      **输出格式**：
      {{
        "attributes": {{
          "QTMRL": [
            "类型: 强化学习算法",
            "描述: 基于多指标引导的量化交易决策代理",
            "性能: 优于9个基线模型"
          ],
          "A2C算法": [
            "类型: 强化学习方法", 
            "描述: Advantage Actor-Critic算法"
          ]
        }},
        "triples": [
          ["Li Xiangdong", "提出", "QTMRL框架"],
          ["QTMRL", "使用", "A2C算法"],
          ["QTMRL", "训练于", "S&P 500数据集"],
          ["QTMRL", "优于", "ARIMA模型"],
          ["QTMRL", "优于", "LSTM模型"],
          ["A2C算法", "属于", "强化学习方法"],
          ["技术指标", "包括", "趋势指标"],
          ["技术指标", "包括", "波动率指标"],
          ["Sharpe Ratio", "衡量", "风险调整收益"]
        ],
        "entity_types": {{
          "QTMRL": "algorithm",
          "Li Xiangdong": "person",
          "A2C算法": "algorithm",
          "S&P 500数据集": "dataset"
        }}
      }}

      **要求**：确保抽取至少15-30个三元组，覆盖文本中的主要概念和关系。只返回JSON，无其他内容。

# 配置参数
config:
  max_text_length: 2000  # 最大文本长度
  max_entities_per_chunk: 30  # 每个文本块最大实体数
  confidence_threshold: 0.2  # 置信度阈值
  enable_domain_adaptation: true  # 启用领域自适应

# 示例输出
example_output: |
  {
    "attributes": {
      "PyTorch": ["类型: 深度学习框架", "开发者: Meta", "许可证: BSD"],
      "神经网络": ["类型: 机器学习模型", "复杂度: 高", "应用: 图像识别"]
    },
    "triples": [
      ["PyTorch", "supports", "神经网络"],
      ["神经网络", "used_for", "图像识别"],
      ["Meta", "develops", "PyTorch"]
    ],
    "entity_types": {
      "PyTorch": "technology",
      "神经网络": "concept", 
      "图像识别": "concept",
      "Meta": "organization"
    }
  }